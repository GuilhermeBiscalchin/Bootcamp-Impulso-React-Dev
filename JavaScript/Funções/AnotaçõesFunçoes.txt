Tipos de Função.

Variáveis criadas dentro de uma função apenas podem ser utilizadas dentro dela.
Quando invocamos o 'return', a função para de ser executada.Exemplo.

function nome(parametros){
    //intruções
    return // valor de retorno
}

=> Função Anônima.

Uma variável pode armazenar uma função.Exemplo:

const soma = function(a,b){
    return a + b
}
soma(1,2) // 3
soma(5,4) // 9

=> Função autoinvocável
Uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada.Exemplo:

(
    function(){
        let name = "Digital Innovation One"
        return name
    }
)();

Também pode ser utilizada com parâmetros ou armazenada em uma variável

- parâmetros, nos parênteses
(
    function(a,b){
        return a+b
    }
)(1,2)

//resultado 3

- salvando, em uma constante.

const soma3 = (
    function(){
        return a +b
    }
)(1,2)

console.log(soma3) // resultado 3

=> Callbacks
Uma função passada como argumento para outra.
Utilizando callbacks, você tem maior controle da ordem de chamadas

const calc = function(operacao,num1,num2){
    return operacao(num1,num2)
}

const soma = function(num1,num2){
    return num1 + num2
}

const sub = function(num1,num2){
    return num1 - num2
}

const resultadoSoma = calc(soma,1,2)
const resultadoSub = calc(sub,1,2)

console.log(resultadoSub) // -1
console.log(resultadoSoma) // 3

///////////////////////////////////////

Parâmetros

=> Valores padrão
Exemplo:
function exponencial(array, num = 1){
    const result = []


    for(let i = 0; i < array.length;i++){
        result.push(array[i] ** num)
    }
    return result
}

exponencial([1,2,3,4])
exponencial([1,2,3,4],4)
//1 // 8 //27 //64

=> Objeto 'arguments'
Um array com todos os parâmetros passados quando a função foi invocada.

function findMax(){
    let max = -Infinity

    for(let i =0; i< arguments.length;i++){
        if(arguments[i] > max){
            max = arguments[i]
        }
    }

    return max
}
>findMax(1,2,3,6,90,1)

=> Arrays e Objetos

Arrays
-> Spread : uma forma de lidar separadamente com elementos
O que era parte de um array se torna um elemento independente.

function sum(x,y,x){
    return x + y + z;
}

const numbers = [1,2,3];

console.log(sum(...numbers)) // usando o '...', é feito um spread e os elementos se comporta de forma independente. Se chamar apenas o 'numbers' o array vai inteiro.

-> Rest: combina os argumentos em um array
O quer era um elemento independente se torna parte de um array.

function confereTamanho(...args){
    console.log(args.length)
}

confereTamanho() //0
confereTamanho(1,2) //1
confereTamanho(3,4,5) // 3

* spread quando está chamando a função.
* Rest quando está declarando a função.

Objetos

=> Object Destructuring
Entre chaves {}, podemos filtrar apenas os dados que nos interessam em um objeto

const user = {
    id:42,
    displayName:"Joe",
    fullName:{
        firstName:"John",
        lastName:"Doe"
    }
}

function userId({id}){
    return id
}

function getFullName({fullName:{firstName:first, lastName:last}}){
    return `${first} ${last}`
}

userId(user)
//42

getFullName(user)
//Joe Doe

//////////////////////////////////////////////////////////////

Loops

 => If/else

 if(condição) {
     variável = Declaração 1(dentro de if) ocorre caso a condição seja verdadeira
 }else{
     variável = Declaração 2(Dentro de else) ocorre caso a condição seja falsa
 }

 else if (){
     Senão, mas um condição a ser aplicada.
 }

  => Switch/case 

Equivale a uma comparação de tipo e valor (==)
Sempre precisa de um valor "default"
Ideal para quando se precisa comparar muitos valores.

function getAnimal(id){
    switch(id){
        case 1:
        return "cão";
        case 2:
        return "gato";
        case 3:
        return "pássaro"
        default:
        return "peixe"
    }
}

getAnimal(1) // cão
getAnimal(2) // gato
getAnimal("1")// peixe => entra no valor default

=> for

Loop dentro de elementos iteráveis(arrays,strings)

function multiplicaPorDois(arr){
    let multiplicados =[]

    for(let i = 0; i < arr.length; i++){
        multiplicados.push(arr[i] * 2)
    }

    return multiplicados
}
const meusNumeros = [2,33,456,356,40]
multiplicaPorDois(meusNumeros)
// [4 , 66 , 912, 712 , 80]

=> For...in 

Loop entre propriedades enumeráveis de um objeto.

// nesse caso,acessa as chaves dos objetos.
function forInExemplo(obj){
    for(prop in obj){
        console.log(prop)
    }
}

const meuObjeto = {
    nome: "João",
    idade:"20",
    cidade:"Salvador",
}

forInExemplo(meuObjeto);
//nome,//idade,//cidade

//nesse caso, acessa os valores das chaves do objeto

function forInExemplo(obj){
    for(prop in obj){
        console.log(obj[prop])
    }
}

const meuObjeto = {
    nome: "João",
    idade:"20",
    cidade:"Salvador",
}

forInExemplo(meuObjeto);
//João,//20,//Salvador

=> For...of(não muito tradicional)

Loop entre estruturas iteráveis(Arrys,strings)

//Exemplo com letras
function logLetras(palavra){
    for(letra of palavra){
        console.log(letra)
    }
}

const palavra = "abacaxi"

logLetras(palavra)
//a //b //a //c //a //x //i 

//Exemplo com Numeros 
function logNumeros(nums){
    for(num of nums){
        console.log(num)
    }
}

const nums = [30,20,233,2]

logLetras(nums)
//30 //20 //233 //2

=>While
Executa instruções até que a condição se torne falsa;
//Até a informação virar falsa.

function exemploWhile(){
    let num = 0

    while(num <= 5){
        console.lo(num)
        num++;
    }
}
//Vai entrar no loop,e ir inclementando até chegar no 5,depois para o loop.

exemploWhile()
//0 -> primeiro loop
//1 -> segundo loop 
//2 -> terceiro loop
//3 -> quarto loop
//4 -> quinto loop
//5 -> fim do loop

=> Do...while
Executa instruções até que a condição se torna falsa, porém a primeira execução sempre ocorre.

//Exemplo Sucesso.
function exemploDoWhile(){
    let num = 0;

    do {
        console.log(num)
        num++;
    }while(num <= 5)
}
exemploDoWhile()
//0
//1
//2
//3
//4
//5

//Exemplo sem sucesso,porém executa uma vez.
function exemploDoWhile(){
    let num = 6

    do{
        console.log(num)
        num++;
    }while(num <= 5)
}

exemploDoWhile()
//6

/////////////////////////////////////////////////

=> This

A palavra reservada 'this' é uma referência de contexto.


No exemplo,'this' refere-se ao objeto pessoa.(objeto pai - a constante.)
Foi declarado dentro de um objeto,então se refere ao objeto.

const pessoa = {
    primeiroNome: "Andre",
    ultimoNome: "Soares",
    id: 1,
    fullName: function(){
        return this.primeiroNome + " " + this.ultimoNome
    },
    getId: function(){
        return this.id
    }
}

pessoa.fullName();
//Andre Soares

pessoa.getId()
// 1

Seu valor pode mudar de acordo com o lugar no código onde foi chamada.

Contexto                 referência
Em um objeto(método)     Próprio objeto dono do método
Sozinha                  Objeto global(em navegadores,window)
Função                   Objeto global
Evento                   Elemento que recebeu o evento.

** Exemplos **

Fora da função 
console.log(this) - retorna um objeto vazio

No navegador
this - retorna o window

Dentro de uma função.
(function (){
    console.log(this)
})() - retorna um objeto global

Dentro de um objeto(método)
Exemplo da const  "Pessoa"

Em um evento no HTML
<button onclick = "console.log(this)> -> é o evento que recebeu, nesse caso é o botão.

=> Manipulando seu valor 'this'

=> Call -> é possível passar parâmetros para essa função separanado-os por virgulas.

const pessoa ={
    nome:"Joao",
}

const animal = {
    nome: "Gato"
}

function getSomethinh(){
    console.log(this.nome) // por conta do metodo 'call'
}

getSomethinh.call(animal) // usando a palavra 'call',chama a const com 'animal'

=> Apply -> é possível passar parametros para essa função dentro de um array

const pessoa ={
    nome:"Joao",
}

const animal = {
    nome: "Gato"
}

function getSomethinh(){
    console.log(this.nome) // vale de acordo com o objeto, que passar na chamada da função
}

getSomethinh.apply(animal) 

=> Bind -> clona a estrutura da função onde é chamada e aplica o valor do objeto pasado como parâmetro

const retornaNomes = function(){
    retorn this.nome
}

let bruno = retornaNomes.bind({nome: 'Bruno'}) // aqui onde está clonando a função

bruno() 
// Bruno

//////////////////////////////////////////////////////////////////

=> Arrow Functions

Sintaxe, representada por '=>'

const helloWorld = function(){
    return "Hello World"
}

mesma coisa seria fazer dessa maneira

const helloWorld = () => {
    return "Hello World"
}

Ou se a função for pequena,não tem a necessidade do return e das chaves.

const helloWorld = () => "Hello World"

- Caso exista apenas uma linha,pode ser dispensar as chaves e o return

- casa exista apenas um parâmetro,pode dispensar os parênteses.

const soma = a => a;
soma(4)
//4

- Arrow function NÃO faz hoisting!

- Outras restrições

'this' sempre será o objeto global,Métodos para modificar seu valor não irão funcionar.

- Não existe o objeto 'arguments'

- o construtur(ex: new MeuObjeto()) também não pode ser utilizado.





