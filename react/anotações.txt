Configurar o React

- React Create App

- React Scripts

=> Criação do package.json

    npm init

=> Instalação do ReactJS

    npm install --save react@16.8.6 react-dom@16.8.6 react-scripts@3.0.1

React Script, monta o servidor para o rodar o projeto.

 ** npm => gerenciador de dependecias do projeto **

 => Criação manual da pasta public

React - é um SPA, aplicação única.

// Buscando a div, do html com a const 'rootElement'
const rootElement = document.getElementById("root");

// Tem a função 'render', onde estou passando um parâmentro, junto com o meu elemento.
ReactDOM.render(<App />, rootElement);

=> JSX 

Nem HTML e nem uma string, linguagem de marcação de HTML e o poder do JS.

O browser não interpreta o JSX, para isso é necessário um transpilador para que a aplicação possa entender o código. O mais utilizado é o Babel.

 ** criando com o react-scripts, o babel já vem instalado. **

1 - Exemplo de JSX

function primeiroJSX(){
  return(
    <div>
      Guilherme Augusto - Introdução ao ReactJS
    </div>
  )
}


const App = () => {
  return (
    <div>
      {primeiroJSX()}
    </div>
  );
}

2 - Exemplo de JSX - realizando uma soma.

function sum(a,b){
  return a + b
}

//primeiro JSX -> lança como função na renderização do arquivo.
function primeiroJSX(){
  return(
    <div>
      Guilherme Augusto - Introdução ao ReactJS
      <h1>Soma: {sum(10,20)}</h1>
    </div>
  )
}


=> Renderização 

- renderização de elementos.
- React DOM 
- Nós Raiz

React 'pensa' em como a interface deve estar a cada momento. Melhora da permoface.

=> Componentes e Props.

- Função e Classe
- Props
- Composição de Componentes.
- Extração de Componentes.

=> Estado e Ciclo de Vida

- Inicialização
- Montagem
- Atualização
- Desmontagem

Nenhum Componente pai ou filho devem saber se outro Componente possui estado ou não.
O estado é apenas local ao Componente e caso seja necessário enviar algum atributo, é feito via props.

=> Webpack ao desenvolvimento com ReactJS

É um module bundler (um empacotador de módulos para aplicações JS)
Gerar bundler que será utilizado no HTML, em ES5

=> Conceitos do Webpack
 
 - Entry -> utilizando grafo, precisa de um ponto de entrada para buscar todos os módulos e dependecias.
 
 - Output -> É para determinar quais são os bundlers que o Webpack irá emitir.

 - Loaders -> É para permitir que o Webpack gerencie arquivos não são javascript.

 - Plugins -> Plugins podem ser utilizados para otimizaão de pacotes,minificação, injeção de script e muito mais.

 - Mode -> Utilizados para abordagem de configuação zero. É possível configurar módulos como production,development ou none.

 -> Production, trás otimizações internas.(arquivo final para produção)
 -> Development, É executado com três plugins: UglifyjsPlugin, ModuleConcatenationPlugin e NoEmitOnErrosPlugin.

=> Criação do arquivo webpack.config.js

  npm i -D webpack webpack-cli //Instalação Mínima do Webpack

  "build":"webpack --mode production"

  npm i @babel/core babel-loader @babel/preset-env @babel/present-react --save-dev 

=> Criação do arquivo .babelrc

{
  "present":[
    "@babel/preset-env"
  ]
}

 ** Tenho que colocar o codigo abaixo

    npm init

** Depois fazer a instalação do webpack

      npm install --save-dev webpack webpack-cli 

** Configurar se no package.json está as duas dependecias de desenvolvimento.

Criação do arquivo -webpack.config.js 

No script, onde está escrito test, posso alterar para utilizar comandos, uso o 

  "build": "webpack --mode production"

Aqui chamo o arquivo 'teste' que criei.

entry: './teste.js',

E para rodar o aplicativo,

  npm run build (foi o nome do arquivo que escolhi para rodar.)

Dessa forma, vai ser gerada a pasta 'dist' junto com o arquivo 'bundle.js'

Sendo assim, vai executar o teste.js

  node dist/bundler.js 

Agora adicionar o 'babel'

npm i @babel/core babel-loader @babel/preset-env @babel/present-react --save-dev 

Depois de instalado no webpack.config.js

module:{
        rules:[
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                use:{
                    loader:"babel-loader"
                }
            }
        ]
    },

Fazer os arquivos;

App.js
index.html
index.js

E criar o arquivo, esse é um arquivo padrão.

.babelrc -> para configuração do babel

Instalação do ReactDOM

  npm i react react-dom 

E colocar o arquivo no '.babelrc'

{
  "presets":[
    "@babel/preset-env"
    "@babel/preset-react"
  ]
}

No script coloco tambem um modo de desenvolvimento.

"scripts": {
    "build": "webpack --mode production",
    "dev": "webpack --mode development"

Ou posso executar tbm dentro do webpack.config.js, o modo que quero que execute.

 mode:'production',


Executo o arquivo.

=> Instalação do plugins para HTML

  npm i -D html-webpack-plugin html-loader

No webpack.config.js

fazer a const => const HtmlWebPackPlugin = require("html-webpack-plugin")

E colocar embaixo o plugin

plugins:[
        new HtmlWebPackPlugin({
            template:"./src/index.html",
            filename:"./index.html"
        })
    ]

E rodar o build, do HTML.

Ver a aplicação funcionando adiconar mais uma dependecias, gerar um servidor.

Dev Server

  npm i -D webpack-dev-server 

no script do package.json

  "scripts":{
    "start:dev": "webpack-dev-server"
  }

Vai montar um servidor local para desenvolvimento.


 ***** ESLint ******

Configuração

	npm install --save-dev eslint babel-eslint eslint-plugin-react eslint-watch

Código simples para o eslint

https://github.com/Tautorn/introduction-reactj

acessar o eslint, para ver a documentação e melhorar a qualidade do código.

 => Para o webpack

Utilizar o 'sourcemap'

	devtool: 'source-map'

Para gerar um mapeamento de todos os arquivos, de forma que o arquivo fica melhor para debugar.


==> Renderização Condicional

- Topico 1 => Variáveis de elementos

 Se o react vai renderização ou não.
Exemplo se visualizar o historico do cliente for verdadeiro!, vai ser renderizado.
Se for falso, não vai ser renderizado,condicionando o operador '&&'

 true - o botão aparece na tela, false - o botão não renderiza.
 se estiver com o if-else inline, ou aparece um ou aparece o outro.




- Topico 2 => If inline com o Operador Lógico && 


 Com o operador &&
{historico && (
               <div>
               Existe um historico de cliente!!!  
               <br/>
               {buttonA}
             </div>
        )}


- Topico 3 => If-Else inline com Operador Condicional

Usando o if-else para se não tiver um cliente aparecer um botão ou se tiver aparecer o outro
 usando o '?' e ' : '
{historico ? (
               <div>
               Existe um historico de cliente!!!  
               <br/>
               {buttonA}
             </div>
        ) : (
            <div>
                Cadastrar Cliente
                <br/>
                {buttonB}
                </div>
        )}

=> Maneira mais simples para usar esse método,separado por funções
// aqui pode passar direto sem o inrrow function '= ()'


 const renderHistorico = () => (
        <div>
               Existe um historico de cliente!!!  
               <br/>
               {buttonA}
             </div>
    )

    const cadastrarCliente = () => (
        <div>
                Cadastrar Cliente
                <br/>
                {buttonB}
                </div>
    )

     {historico ? renderHistorico() : cadastrarCliente() }

- Topico 4 => Evitando que um Componente seja Renderizado


Evitando que um componente seja renderizado.

Não recomendado mais de um return, no mesmo método.


 const nomeCliente = () => {
        if(!historico) return null

        return(
            <div>
                <h1>Nome do Cliente: Guilherme</h1>
            </div>
        )
    }

na função
<div>
            {nomeCliente()}
        </div>

  Exemplo na pasta 'renderizacaoCondicional'

==> Listas e Chaves

- Topico 1 => Renderizand Múltiplos Componentes

- Topico 2 => Componente de Lista Básico

const listaClientes = [
    {
        id: 1,
        nome: 'Pelé'
    },
    {
        id:2,
        nome:'Romário'
    },
    {
        id: 3,
        nome: 'Gaucho'
    },
    {
        id: 4,
        nome:'Marcelinho'
    }
]

Criação da função para separar em blocos 
 chamo o array de objeto, e passa o 'map' com a renderização que fiz.
Na função está retornando a lista, com todos o clientes que criei.
 Interação em cima de uma lista em React.

 const renderClientes = (cliente, index) => {
    return(
        <li>{cliente.nome}</li>
    )
}

  <ul>
                {listaClientes.map(renderClientes)}
                </ul>



- Topico 3 => Chaves

No React é necessário passar a key.

 const renderClientes = (cliente, index) =>

 a key, vai ser o index, retornando a posição do elemento no array.

    <li key={index}>{cliente.nome}</li>

Sempre chave únicas.

Não colocar o  'index' de forma direta, para sempre ser gerado unico o valor.
Colocar em ` `, com um nome que faça sentido do que está fazendo.
e depois chamando o 'id',definido na lista.

Evita problemas de chave duplicadas.

<li key={`clientes-${cliente.id}`}>{cliente.nome}</li>

Interando uma outra lista, utilizando o map.

 <li key={`clientes-${cliente.id}`}>{cliente.nome}</li>
            {cliente.clubes.map(renderClubes)}

E fazendo outra função para essa exibição.

  const renderClubes = (clube,index) => {
        return(
            <div style = {{paddingLeft: '30px'}}>
                <li key={`clube-${index}`}>{clube}</li>
            </div>
        )
    } 

- Topico 4 => Extraindo Componentes com Chaves

- Topico 5 => Chaves devem ser Únicas apenas entre Elementos Irmãos

Porém aqui, vai reclamar do 'index', para ter uma única chave, e não ficar dando erro.
Ter um 'id' separado, para ter uma chave única.

Para resolver o erro, colocar a chamada do indice no elemento pai.

const renderClientes = (cliente, index) => {
    return(
        <div key={`clientes-${cliente.id}`}>
            <li>{cliente.nome}</li>
            {cliente.clubes.map(renderClubes)}
        </div>
    )
}

    const renderClubes = (clube,index) => {
        return(
             <div style = {{paddingLeft: '30px'}} key={`clube-${index}`}>
                <li>{clube}</li>
            </div>
        )
    } 

==> Manipulando Eventos

- Evento de onClick

//Evitar o re-render
const showEvent = () => {
    alert('Evento de onClick!')
}
//Exemplo onClick
const Button = <button onClick ={showEvent}>Mostrar Evento!</button>

Evento 'e', que mostra tudo o que aconteceu quando cliquei no botão 

console.log(e)

Manipulação de uma valor alterado, exemplo com o 'target'

- Evento de onChange

   const handleChange = (e) => {
       const {value} = e.target
       console.log(value)
   }

 <input onChange = {handleChange}/>

 Pode ser passando argumentos para alteração de eventos.

Dentro da função a variavel
 const name = "Digital Innovation"

Pegando a variavel fora do escopo, e passando (evitando de fazer o bind)
   const showEvent = (e) => {
        console.log('Evento de onClick!')
        //Tenho a descrição de todos os eventos
        console.log(e)
        alert(name)
    }

- Argumentos para alterações de eventos
Botão Deletar

 Aparece um botão para deletar cada cliente.
const handleClick = (e) => {
    console.log('deletar cliente')
}

 <li>{cliente.nome} <button onClick = {handleClick}>Delete Cliente x</button></li>

Dessa forma mostra a posição do cliente especifica para deletar, com o argumentos 'id'

const handleClick = (e,id) => {
    console.log('deletar cliente')
    alert(`ID do cliente:${id}`)
}

<li>{cliente.nome} <button onClick = {(e) => handleClick(e,cliente.id)}>Delete Cliente x</button></li>


==> Pensando com ReactJS

- Comece com um Mock

- Separe a UI em Uma Hieraquia de Componentes

- Crie uma versão Estática em React

- Identifique a Representação Mínima(mas completa) do State da UI

- Identifique onde State deve ficar.

- Adicione o Fluxo de Dados Inverso














